/***********************************************
#
# Author: Sun Qinxuan
#
# Email: sunqinxuan@outlook.com
#
# Last modified: 2023-07-13 09:35
#
# Filename: imu_factor.hpp
#
# Description:
#
************************************************/
/*******************************************************
 * Copyright (C) 2019, Aerial Robotics Group, Hong Kong University of Science
 *and Technology
 *
 * This file is part of VINS.
 *
 * Licensed under the GNU General Public License v3.0;
 * you may not use this file except in compliance with the License.
 *******************************************************/

#pragma once
#include <ceres/ceres.h>
#include <eigen3/Eigen/Dense>
#include <iostream>

#include "optimizer/imu_preintegration.hpp"
#include "tools/converter.hpp"
#include "tools/geometry.hpp"
#include "tools/message_print.hpp"
//#include "../utility/utility.h"
//#include "../estimator/parameters.h"
//#include "integration_base.h"

namespace vslam {
class IMUFactor : public ceres::SizedCostFunction<15, 7, 9, 7, 9> {
public:
  IMUFactor() = delete;
  IMUFactor(std::shared_ptr<IMUPreintegration> p) : imu_preint_(p) {}

  virtual bool Evaluate(double const *const *parameters, double *residuals,
                        double **jacobians) const {

    Eigen::Vector3d Pi(parameters[0][0], parameters[0][1], parameters[0][2]);
    Eigen::Quaterniond Qi(parameters[0][6], parameters[0][3], parameters[0][4],
                          parameters[0][5]);

    Eigen::Vector3d Vi(parameters[1][0], parameters[1][1], parameters[1][2]);
    Eigen::Vector3d Bai(parameters[1][3], parameters[1][4], parameters[1][5]);
    Eigen::Vector3d Bgi(parameters[1][6], parameters[1][7], parameters[1][8]);

    Eigen::Vector3d Pj(parameters[2][0], parameters[2][1], parameters[2][2]);
    Eigen::Quaterniond Qj(parameters[2][6], parameters[2][3], parameters[2][4],
                          parameters[2][5]);

    Eigen::Vector3d Vj(parameters[3][0], parameters[3][1], parameters[3][2]);
    Eigen::Vector3d Baj(parameters[3][3], parameters[3][4], parameters[3][5]);
    Eigen::Vector3d Bgj(parameters[3][6], parameters[3][7], parameters[3][8]);

    Eigen::Map<Eigen::Matrix<double, 15, 1>> residual(residuals);
    residual =
        imu_preint_->evaluate(Pi, Qi, Vi, Bai, Bgi, Pj, Qj, Vj, Baj, Bgj);

    Eigen::Matrix<double, 15, 15> sqrt_info =
        Eigen::LLT<Eigen::Matrix<double, 15, 15>>(
            imu_preint_->getCovariance().inverse())
            .matrixL()
            .transpose();
    // sqrt_info.setIdentity();
    residual = sqrt_info * residual;

    if (jacobians) {
      double sum_dt = imu_preint_->getSumDt();
      Eigen::Matrix3d dp_dba = imu_preint_->getJacobian(0, 9);
      Eigen::Matrix3d dp_dbg = imu_preint_->getJacobian(0, 12);

      Eigen::Matrix3d dq_dbg = imu_preint_->getJacobian(3, 12);

      Eigen::Matrix3d dv_dba = imu_preint_->getJacobian(6, 9);
      Eigen::Matrix3d dv_dbg = imu_preint_->getJacobian(6, 12);

      //if (imu_preint_->jacobian.maxCoeff() > 1e8 || imu_preint_->jacobian.minCoeff() < -1e8) 
      if (imu_preint_->getJacMaxCoeff() > 1e8 || imu_preint_->getJacMinCoeff() < -1e8) 
			{
        WARNING("numerical unstable in preintegration");
        // std::cout << imu_preint_->jacobian << std::endl;
        ///                ROS_BREAK();
      }

      if (jacobians[0]) {
        Eigen::Map<Eigen::Matrix<double, 15, 7, Eigen::RowMajor>>
            jacobian_pose_i(jacobians[0]);
        jacobian_pose_i.setZero();

        //jacobian_pose_i.block<3, 3>(0, 0) =
        jacobian_pose_i.block<3, 3>(0, 0) =
            -Qi.inverse().toRotationMatrix();
        jacobian_pose_i.block<3, 3>(0, 3) = Converter::skewSymmetric(
            Qi.inverse() * (0.5 * G * sum_dt * sum_dt + Pj - Pi - Vi * sum_dt));

        Eigen::Quaterniond corrected_delta_q =
            imu_preint_->getDeltaQ() *
            Converter::deltaQ(dq_dbg * (Bgi - imu_preint_->getLinearizedBG()));
        // imu_preint_->delta_q *
        // Utility::deltaQ(dq_dbg * (Bgi - imu_preint_->linearized_bg));
        jacobian_pose_i.block<3, 3>(3, 3) =
            -(Converter::Qleft(Qj.inverse() * Qi) *
              Converter::Qright(corrected_delta_q))
                 .bottomRightCorner<3, 3>();

        jacobian_pose_i.block<3, 3>(6, 3) =
            Converter::skewSymmetric(Qi.inverse() * (G * sum_dt + Vj - Vi));

        jacobian_pose_i = sqrt_info * jacobian_pose_i;

        if (jacobian_pose_i.maxCoeff() > 1e8 ||
            jacobian_pose_i.minCoeff() < -1e8) {
          WARNING("numerical unstable in preintegration");
          // std::cout << sqrt_info << std::endl;
          // ROS_BREAK();
        }
      }
      if (jacobians[1]) {
        Eigen::Map<Eigen::Matrix<double, 15, 9, Eigen::RowMajor>>
            jacobian_speedbias_i(jacobians[1]);
        jacobian_speedbias_i.setZero();
        jacobian_speedbias_i.block<3, 3>(0, 6 - 6) =
            -Qi.inverse().toRotationMatrix() * sum_dt;
        jacobian_speedbias_i.block<3, 3>(0, 9 - 6) = -dp_dba;
        jacobian_speedbias_i.block<3, 3>(0, 12 - 6) = -dp_dbg;

        jacobian_speedbias_i.block<3, 3>(3, 12 - 6) =
            -Converter::Qleft(Qj.inverse() * Qi * imu_preint_->getDeltaQ())
                 .bottomRightCorner<3, 3>() *
            dq_dbg;
        //-Utility::Qleft(Qj.inverse() * Qi *
        // imu_preint_->delta_q).bottomRightCorner<3, 3>() * dq_dbg;

        jacobian_speedbias_i.block<3, 3>(6, 6 - 6) =
            -Qi.inverse().toRotationMatrix();
        jacobian_speedbias_i.block<3, 3>(6, 9 - 6) = -dv_dba;
        jacobian_speedbias_i.block<3, 3>(6, 12 - 6) = -dv_dbg;

        jacobian_speedbias_i.block<3, 3>(9, 9 - 6) =
            -Eigen::Matrix3d::Identity();

        jacobian_speedbias_i.block<3, 3>(12, 12 - 6) =
            -Eigen::Matrix3d::Identity();

        jacobian_speedbias_i = sqrt_info * jacobian_speedbias_i;

        // ROS_ASSERT(fabs(jacobian_speedbias_i.maxCoeff()) < 1e8);
        // ROS_ASSERT(fabs(jacobian_speedbias_i.minCoeff()) < 1e8);
      }
      if (jacobians[2]) {
        Eigen::Map<Eigen::Matrix<double, 15, 7, Eigen::RowMajor>>
            jacobian_pose_j(jacobians[2]);
        jacobian_pose_j.setZero();

        jacobian_pose_j.block<3, 3>(0, 0) = Qi.inverse().toRotationMatrix();

        Eigen::Quaterniond corrected_delta_q =
            imu_preint_->getDeltaQ() *
            Converter::deltaQ(dq_dbg * (Bgi - imu_preint_->getLinearizedBG()));
        // imu_preint_->delta_q *
        // Utility::deltaQ(dq_dbg * (Bgi - imu_preint_->linearized_bg));
        jacobian_pose_j.block<3, 3>(3, 3) =
            Converter::Qleft(corrected_delta_q.inverse() * Qi.inverse() * Qj)
                .bottomRightCorner<3, 3>();

        jacobian_pose_j = sqrt_info * jacobian_pose_j;

        // ROS_ASSERT(fabs(jacobian_pose_j.maxCoeff()) < 1e8);
        // ROS_ASSERT(fabs(jacobian_pose_j.minCoeff()) < 1e8);
      }
      if (jacobians[3]) {
        Eigen::Map<Eigen::Matrix<double, 15, 9, Eigen::RowMajor>>
            jacobian_speedbias_j(jacobians[3]);
        jacobian_speedbias_j.setZero();

        jacobian_speedbias_j.block<3, 3>(6, 6 - 6) =
            Qi.inverse().toRotationMatrix();

        jacobian_speedbias_j.block<3, 3>(9, 9 - 6) =
            Eigen::Matrix3d::Identity();

        jacobian_speedbias_j.block<3, 3>(12, 12 - 6) =
            Eigen::Matrix3d::Identity();

        jacobian_speedbias_j = sqrt_info * jacobian_speedbias_j;

        // ROS_ASSERT(fabs(jacobian_speedbias_j.maxCoeff()) < 1e8);
        // ROS_ASSERT(fabs(jacobian_speedbias_j.minCoeff()) < 1e8);
      }
    }

    return true;
  }

private:
  std::shared_ptr<IMUPreintegration> imu_preint_;
};

} // namespace vslam
