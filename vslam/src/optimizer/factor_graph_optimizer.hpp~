/***********************************************
#
# Author: Sun Qinxuan
#
# Email: sunqinxuan@outlook.com
#
# Last modified:	2023-08-11 09:52
#
# Filename:		factor_graph_optimizer.hpp
#
# Description:
#
************************************************/

#ifndef VSLAM_FACTOR_GRAPH_OPTIMIZER_HPP_
#define VSLAM_FACTOR_GRAPH_OPTIMIZER_HPP_

#include <ceres/ceres.h>
#include <eigen3/Eigen/Dense>
#include <fstream>
#include <unordered_map>
#include <vector>

#include "optimizer/camera_projection_factor.hpp"
#include "optimizer/imu_factor.hpp"
#include "optimizer/imu_preintegration.hpp"
#include "optimizer/marginalization_factor.hpp"
#include "optimizer/vertex_params.hpp"
#include "tools/geometry.hpp"
#include "tools/message_print.hpp"
#include "tools/tic_toc.hpp"

namespace vslam {
class FactorGraphOptimizer {
public:
  // using MapVertexNavState = std::unordered_map<int, VertexParamNavState>;
  // using MapVertexCameraEx = std::unordered_map<int, VertexParamCameraEx>;
  // using MapVertexFeature = std::unordered_map<int, VertexParamFeature>;

  FactorGraphOptimizer() = delete;
  FactorGraphOptimizer(const int num_iter, const double max_time,
                       const bool debug, const double sigma,
                       const int window_size, bool use_imu);
  ~FactorGraphOptimizer();

  void initGraph();
  void clearGraph();
  bool optimize();

  void initMarginalization();
  void clearMarginalization();
  bool marginalize();

  void setVertices(const std::vector<NavState> &nav_states,
                   const std::vector<IMUBias> &imu_bias,
                   const Eigen::Isometry3d &Tic0, const Eigen::Isometry3d &Tic1,
                   const Eigen::VectorXd &depth_vec);

  void addParamNavState(const int idx, bool fix = false);
  void addParamCameraEx(const int idx, bool fix = false);
  // void addParamFeature(const int idx, const double val);

  bool addFactorMargin(const std::shared_ptr<MarginalizationInfo> &margin_info,
                       const std::vector<double *> &margin_param_blocks);

  bool addFactorIMU(const int idx_pre, const int idx,
                    const std::shared_ptr<IMUPreintegration> &imu_preint);

  bool addFactorProject12(const int f_idx, const Eigen::Vector3d &pts_i,
                          const Eigen::Vector3d &pts_j,
                          const Eigen::Vector2d &vel_i,
                          const Eigen::Vector2d &vel_j, const double td_i,
                          const double td_j);
  bool addFactorProject21(const int idx_i, const int idx_j, const int f_idx,
                          const Eigen::Vector3d &pts_i,
                          const Eigen::Vector3d &pts_j,
                          const Eigen::Vector2d &vel_i,
                          const Eigen::Vector2d &vel_j, const double td_i,
                          const double td_j);
  bool addFactorProject22(const int idx_i, const int idx_j, const int f_idx,
                          const Eigen::Vector3d &pts_i,
                          const Eigen::Vector3d &pts_j,
                          const Eigen::Vector2d &vel_i,
                          const Eigen::Vector2d &vel_j, const double td_i,
                          const double td_j);

  bool getNavStateBias(const int idx, NavState &nav_state, IMUBias &bias,
                       const Eigen::Matrix3d &dR0,
                       const Eigen::Vector3d &P0) const;
  bool getNavStateBias(const int idx, NavState &nav_state, IMUBias &bias) const;
  bool getNavState(const int idx, NavState &nav_state) const;
  bool getCameraEx(const int idx, Eigen::Isometry3d &Tic) const;
  bool getFeature(const int idx, double &val) const;

  bool
  addMGFactorMargin(const std::shared_ptr<MarginalizationInfo> &margin_info,
                    const std::vector<double *> &margin_param_blocks,
                    const std::vector<int> &drop_set);
  bool addMGFactorIMU(const int idx_pre, const int idx,
                      const std::shared_ptr<IMUPreintegration> &imu_preint);
  bool addMGFactorProject12(const int f_idx, const Eigen::Vector3d &pts_i,
                            const Eigen::Vector3d &pts_j,
                            const Eigen::Vector2d &vel_i,
                            const Eigen::Vector2d &vel_j, const double td_i,
                            const double td_j);
  bool addMGFactorProject21(const int idx_i, const int idx_j, const int f_idx,
                            const Eigen::Vector3d &pts_i,
                            const Eigen::Vector3d &pts_j,
                            const Eigen::Vector2d &vel_i,
                            const Eigen::Vector2d &vel_j, const double td_i,
                            const double td_j);
  bool addMGFactorProject22(const int idx_i, const int idx_j, const int f_idx,
                            const Eigen::Vector3d &pts_i,
                            const Eigen::Vector3d &pts_j,
                            const Eigen::Vector2d &vel_i,
                            const Eigen::Vector2d &vel_j, const double td_i,
                            const double td_j);

  double *getParamNavState(const int i) {
    // DEBUG("vertices_nav_state_[i].pose.data() =
    // ",vertices_nav_state_[i].pose.data());
    return vertices_nav_state_[i].pose.data();
  }
  double *getParamVelBias(const int i) {
    return vertices_nav_state_[i].vel_bias.data();
  }
  double *getParamCameraEx(const int i) {
    return vertices_camera_ex_[i].pose.data();
  }
  double *getParamFeature(const int i) {
    return vertices_feature_[i].depth.data();
  }
  double *getParamTd() { return vertices_td_.data(); }

  std::shared_ptr<MarginalizationInfo> getMarginPtr() {
    return marginalization_;
  }

private:
  bool use_imu_;
  int max_num_iterations_ = 10;
  double max_solver_time_ = 0.05;
  bool minimizer_progress_to_stdout_ = false;
  double sqrt_info_sigma_ = 306.7;

  ceres::Problem *problem_;
  ceres::LossFunction *loss_function_;

  std::shared_ptr<MarginalizationInfo> marginalization_;

  // MapVertexNavState vertices_nav_state_;
  // MapVertexCameraEx vertices_camera_ex_;
  // MapVertexFeature vertices_feature_;
  std::vector<VertexParamNavState> vertices_nav_state_;
  std::vector<VertexParamCameraEx> vertices_camera_ex_;
  std::vector<VertexParamFeature> vertices_feature_;
  Eigen::Matrix<double, 1, 1> vertices_td_;
};
} // namespace vslam
#endif
