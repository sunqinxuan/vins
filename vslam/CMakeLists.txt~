cmake_minimum_required(VERSION 2.8.3)
project(vslam)

SET(CMAKE_BUILD_TYPE "Debug") #Debug/Release
MESSAGE("Build type: " ${CMAKE_BUILD_TYPE})

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -W -Wall -fPIC -O3  -Wno-error=deprecated-declarations -Wno-deprecated-declarations -g") #-g


add_compile_options(-std=c++14)
add_definitions(-std=c++14)
set(CMAKE_CXX_STANDARD 14)

#option(USE_SIM "option for cmake" on) 
#option(USE_ARM "option for arm  " off)
#option(USE_CUDA "option for cuda" off)
#option(USE_CODE "option for cmake" on) 

#if(USE_SIM)
#   message("USE_SIM true")
#   add_definitions(-DUSE_SIM)
#endif()
#if(USE_ARM)
#   message("USE_ARM true")
#   add_definitions(-DARM)
#   cmake_policy(SET CMP0046 OLD)
#endif()
#if(USE_CUDA)
#   find_package(CUDA QUIET REQUIRED)
#   set(CUDA_PROPAGATE_HOST_FLAGS OFF)
#   SET(CUDA_HOST_COMPILER /usr/bin/g++)
#   add_definitions(-DCUDA_FOUND)
#   LIST(APPEND CUDA_NVCC_FLAGS "--compiler-options -fno-strict-aliasing -use_fast_math")
#   cuda_include_directories(${CUDA_TOOLKIT_ROOT_DIR}/samples/common/inc)
#   cuda_add_library(cuda_filter ${CUDA_INCLUDE_HS} ${CUDA_SRCS} )
#   include_directories(${CUDA_INCLUDE_DIRS} )
#   #list(APPEND ALL_TARGET_LIBRARIES ${CUDA_LIBRARIES})
#   #list(APPEND ALL_TARGET_LIBRARIES cuda_filter )
#endif()


find_package(OpenCV REQUIRED)
find_package(catkin REQUIRED COMPONENTS
  cv_bridge
  roscpp
  rospy
  sensor_msgs
  std_msgs
  geometry_msgs
  visualization_msgs
  tf
  #message_generation 
  #std_srvs
)

#add_service_files(
#   FILES
#   saveMap.srv
#   pubMap.srv
#   optimizeMap.srv
#   searchLoop.srv
#)

#add_message_files(
#   DIRECTORY msg
#   FILES
#   InsInfo.msg
#   PcInsInfo.msg
#   KeyFrameFusion.msg
#)

generate_messages(
   DEPENDENCIES
   std_msgs
   geometry_msgs
   sensor_msgs
)

catkin_package(
   CATKIN_DEPENDS
   message_runtime
   std_msgs
   geometry_msgs
   sensor_msgs
)

include_directories(src ${catkin_INCLUDE_DIRS}) #include
include_directories(src/camera_models ${catkin_INCLUDE_DIRS}) #include

set(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_SOURCE_DIR}/lib)

add_subdirectory(${PROJECT_SOURCE_DIR}/src/tools)
add_subdirectory(${PROJECT_SOURCE_DIR}/src/camera_models)
add_subdirectory(${PROJECT_SOURCE_DIR}/src/optimizer)

add_subdirectory(${PROJECT_SOURCE_DIR}/src/dataflow)
add_subdirectory(${PROJECT_SOURCE_DIR}/src/frontend)


add_executable(slam_node src/slam_node.cpp)
add_dependencies(slam_node ${catkin_EXPORTED_TARGETS})
target_link_libraries(slam_node dataflow frontend ${catkin_LIBRARIES})




#add_executable(kitti_node src/slam_node.cpp)
#add_dependencies(kitti_node ${catkin_EXPORTED_TARGETS})
#target_link_libraries(kitti_node ${catkin_LIBRARIES})
